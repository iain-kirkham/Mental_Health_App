package dev.iainkirkham.mental_planner_backend.taskplanner;

import jakarta.persistence.*;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;

import java.time.LocalDate;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.List;

/**
 * This entity represents a task within the planner.
 */
@Entity
@Table(name = "tasks")
@Data
@NoArgsConstructor
@AllArgsConstructor
public class Task {

    /**
     * This is the unique identifier of the task, it is both the primary key and is auto-generated by the database
     * on insertion of a new entry.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * The title or name of the task.
     */
    @Column(nullable = false)
    private String title;

    /**
     * Optional detailed description of the task.
     * Stored as TEXT in the database to allow for longer descriptions.
     */
    @Column(columnDefinition = "TEXT")
    private String description;

    /**
     * The date when the task is scheduled to be completed.
     */
    @Column(nullable = false)
    private LocalDate date;

    /**
     * Optional start time for the task.
     * If null, the task is considered an all-day task without a specific start time.
     */
    private LocalTime startTime;

    /**
     * Indicates whether the user has completed this task.
     * Defaults to false when a new task is created.
     */
    private boolean completed = false;

    /**
     * List of subtasks associated with this task.
     * This establishes a One-to-Many relationship where one task can have multiple subtasks.
     * CascadeType.ALL ensures that operations on the task are cascaded to its subtasks.
     * orphanRemoval = true means that subtasks are automatically deleted when removed from this list.
     */
    @OneToMany(mappedBy = "task", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<SubTask> subTasks = new ArrayList<>();

    /**
     * Helper method to add a subtask to this task and establish the bidirectional relationship.
     * This ensures that the subtask's parent task reference is properly set.
     */
    public void addSubTask(SubTask subTask) {
        subTasks.add(subTask);
        subTask.setTask(this);
    }

    /**
     * Helper method to remove a subtask from this task and clear the bidirectional relationship.
     * This ensures that the subtask's parent task reference is properly cleared.
     */
    public void removeSubTask(SubTask subTask) {
        subTasks.remove(subTask);
        subTask.setTask(null);
    }
}